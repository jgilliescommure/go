// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package personcrud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersoncrudClient is the client API for Personcrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersoncrudClient interface {
	CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonReply, error)
	UpdatePerson(ctx context.Context, in *UpdatePersonRequest, opts ...grpc.CallOption) (*PersonReply, error)
	GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*PersonReply, error)
	ListPersons(ctx context.Context, in *ListPersonRequest, opts ...grpc.CallOption) (*ListPersonReply, error)
}

type personcrudClient struct {
	cc grpc.ClientConnInterface
}

func NewPersoncrudClient(cc grpc.ClientConnInterface) PersoncrudClient {
	return &personcrudClient{cc}
}

func (c *personcrudClient) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonReply, error) {
	out := new(CreatePersonReply)
	err := c.cc.Invoke(ctx, "/api.personcrud.Personcrud/CreatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personcrudClient) UpdatePerson(ctx context.Context, in *UpdatePersonRequest, opts ...grpc.CallOption) (*PersonReply, error) {
	out := new(PersonReply)
	err := c.cc.Invoke(ctx, "/api.personcrud.Personcrud/UpdatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personcrudClient) GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*PersonReply, error) {
	out := new(PersonReply)
	err := c.cc.Invoke(ctx, "/api.personcrud.Personcrud/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personcrudClient) ListPersons(ctx context.Context, in *ListPersonRequest, opts ...grpc.CallOption) (*ListPersonReply, error) {
	out := new(ListPersonReply)
	err := c.cc.Invoke(ctx, "/api.personcrud.Personcrud/ListPersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersoncrudServer is the server API for Personcrud service.
// All implementations must embed UnimplementedPersoncrudServer
// for forward compatibility
type PersoncrudServer interface {
	CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonReply, error)
	UpdatePerson(context.Context, *UpdatePersonRequest) (*PersonReply, error)
	GetPerson(context.Context, *GetPersonRequest) (*PersonReply, error)
	ListPersons(context.Context, *ListPersonRequest) (*ListPersonReply, error)
	mustEmbedUnimplementedPersoncrudServer()
}

// UnimplementedPersoncrudServer must be embedded to have forward compatible implementations.
type UnimplementedPersoncrudServer struct {
}

func (UnimplementedPersoncrudServer) CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedPersoncrudServer) UpdatePerson(context.Context, *UpdatePersonRequest) (*PersonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerson not implemented")
}
func (UnimplementedPersoncrudServer) GetPerson(context.Context, *GetPersonRequest) (*PersonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersoncrudServer) ListPersons(context.Context, *ListPersonRequest) (*ListPersonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersons not implemented")
}
func (UnimplementedPersoncrudServer) mustEmbedUnimplementedPersoncrudServer() {}

// UnsafePersoncrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersoncrudServer will
// result in compilation errors.
type UnsafePersoncrudServer interface {
	mustEmbedUnimplementedPersoncrudServer()
}

func RegisterPersoncrudServer(s grpc.ServiceRegistrar, srv PersoncrudServer) {
	s.RegisterService(&Personcrud_ServiceDesc, srv)
}

func _Personcrud_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersoncrudServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.personcrud.Personcrud/CreatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersoncrudServer).CreatePerson(ctx, req.(*CreatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personcrud_UpdatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersoncrudServer).UpdatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.personcrud.Personcrud/UpdatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersoncrudServer).UpdatePerson(ctx, req.(*UpdatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personcrud_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersoncrudServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.personcrud.Personcrud/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersoncrudServer).GetPerson(ctx, req.(*GetPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Personcrud_ListPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersoncrudServer).ListPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.personcrud.Personcrud/ListPersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersoncrudServer).ListPersons(ctx, req.(*ListPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Personcrud_ServiceDesc is the grpc.ServiceDesc for Personcrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Personcrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.personcrud.Personcrud",
	HandlerType: (*PersoncrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _Personcrud_CreatePerson_Handler,
		},
		{
			MethodName: "UpdatePerson",
			Handler:    _Personcrud_UpdatePerson_Handler,
		},
		{
			MethodName: "GetPerson",
			Handler:    _Personcrud_GetPerson_Handler,
		},
		{
			MethodName: "ListPersons",
			Handler:    _Personcrud_ListPersons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/personcrud/personcrud.proto",
}
